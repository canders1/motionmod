var cost_setting = 0.75;
var speaker = 'Sarah';
var addressee = 'Jane';

var stringify = function(x){return JSON.stringify(x)}

var worlds = [
	{locSarah: 'Amherst', locJane: 'Amherst', moveJaneNoho: true, moveSarahNoho: false, moveElizaNoho: false},
	{locSarah: 'Amherst', locJane: 'Amherst', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	{locSarah: 'Amherst', locJane: 'Amherst', moveJaneNoho: false, moveSarahNoho: true, moveElizaNoho: false},
	{locSarah: 'Noho', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	{locSarah: 'Noho', locJane: 'Amherst', moveJaneNoho: true, moveSarahNoho: false, moveElizaNoho: false},
	{locSarah: 'Noho', locJane: 'Amherst', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	{locSarah: 'Amherst', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	{locSarah: 'Amherst', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: true, moveElizaNoho: false},
	]

var worldPrior = function() {
	return uniformDraw(worlds)
}

var perspectives = [
{holder: speaker},
{holder: addressee}]

var perspectiveSelect = {
	'You are coming to Northampton' : function(){ return {holder: speaker}},
	'You are going to Northampton' : function(){ return {holder: speaker}},
	'I am coming to Northampton' : function(){ return {holder: addressee}},
	'I am going to Northampton' : function(){ return {holder: addressee}},
	'Eliza is coming to Northampton' : function(){ return uniformDraw(perspectives)},
	'Eliza is going to Northampton' : function(){ return uniformDraw(perspectives)},
};

var perspectiveCost = function(perspective) {
	if(perspective.holder === speaker) {
	return 0 }
	else {
	return cost_setting
	}
}

var utteranceCost = function(utterance) {
	return 0
}

var utterances = [
'You are coming to Northampton',
'I am coming to Northampton',
'Eliza is going to Northampton',
'Eliza is coming to Northampton',
'I am going to Northampton',
'You are going to Northampton']

var uttPrior = function() {
	return uniformDraw(utterances)
};

var gop_meaning = function(utterance, world, perspective){
  if ((utterance == 'Eliza is coming to Northampton' && (world.moveElizaNoho && (((perspective.holder === speaker) && (world.locSarah === 'Noho'))||((perspective.holder === addressee) && (world.locJane === 'Noho'))))) ||
  (utterance == 'You are coming to Northampton' && (world.moveJaneNoho && (perspective.holder === speaker) && (world.locSarah === 'Noho'))) ||
  (utterance == 'I am coming to Northampton' && (world.moveSarahNoho && (perspective.holder === addressee) && (world.locJane === 'Noho'))) ||
  (utterance == 'Eliza is going to Northampton' && (world.moveElizaNoho && ((perspective.holder === speaker) && (world.locSarah === 'Amherst')||(perspective.holder === addressee && world.locJane === 'Amherst'))))||
  (utterance == 'You are going to Northampton' && (world.moveJaneNoho && ((perspective.holder === speaker) && (world.locSarah === 'Amherst')||(perspective.holder === addressee && world.locJane === 'Amherst'))))||
  (utterance == 'I am going to Northampton' && (world.moveSarahNoho && ((perspective.holder === speaker) && (world.locSarah === 'Amherst')||(perspective.holder === addressee && world.locJane === 'Amherst'))))){
  	return 1
  } else {
  	return 0
  }
}

var nogop_meaning = function(utterance, world, perspective){
  if ((utterance == 'Eliza is coming to Northampton' && (world.moveElizaNoho && (((perspective.holder === speaker) && (world.locSarah === 'Noho'))||((perspective.holder === addressee) && (world.locJane === 'Noho'))))) ||
   (utterance == 'You are coming to Northampton' && (world.moveJaneNoho && (perspective.holder === speaker) && (world.locSarah === 'Noho'))) ||
  (utterance == 'I am coming to Northampton' && (world.moveSarahNoho && (perspective.holder === addressee) && (world.locJane === 'Noho'))) ||
  (utterance == 'Eliza is going to Northampton' && world.moveElizaNoho) ||
  (utterance == 'You are going to Northampton' && world.moveJaneNoho) ||
  (utterance == 'I am going to Northampton' && world.moveSarahNoho)){
  	return 1
  } else {
  	return 0
  }
}

var marg_perspective = function(utt,perspective){
  var probs = map(function(w){nogop_meaning(utt,w,perspective)},worlds)
  return Math.sum(probs)
}

var literalListener = function(utterance,perspective){
   return Infer({model: function(){
   var world = worldPrior()
   var meaning = nogop_meaning(utterance,world,perspective)
   condition(meaning)
   return world
   }})
};

var literalSpeaker = function(world) {
  return Infer({model: function(){
    var utt = uttPrior()
    var pPrior = perspectiveSelect[utt]
    var p = pPrior()
    var margP = marg_perspective(utt,p)
    factor(((literalListener(utt,p).score(world)*margP)-perspectiveCost(p))) //Need to implement summation over messages here
    return {utterance: utt,perspective: p}
  }})
}

var pragmaticListener = function(u) {
  return Infer({model: function(){
    var pPrior = perspectiveSelect[u]
    var p = pPrior()
    var w = worldPrior()
    factor(literalSpeaker(w).score({utterance:u,perspective: p}))
    return {world: w,perspective: p}
  }})
}

var pragmaticSpeaker = function(w) {
  return Infer({model: function(){
    var utt = uttPrior()
    var pPrior = perspectiveSelect[utt]
    var p = pPrior()
    factor((pragmaticListener(utt).score({world: w,perspective: p})-perspectiveCost(p)))
    return {utterance: utt,perspective: p}
  }})
}
display(stringify(literalSpeaker(worlds[6])));
display(stringify(pragmaticSpeaker(worlds[6])))