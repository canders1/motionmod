var cost_setting = process.argv[3];

var speaker = 'Sam';
var addressee = 'Lucy';

var stringify = function(x){return JSON.stringify(x)}

var printOne = function(x,f,c){
  console.log("Cost: "+c)
  console.log("Utterance: "+stringify(x));
  console.log("Evidence: "+stringify(f(x)));
  return
}

var printAll = function(arr,f,c){
  map(function(x){printOne(x,f,c)},arr);
  return
}

var worlds = [
	{locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: true, moveSamNoho: false, moveThelmaNoho: false},
	{locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: true, moveThelmaNoho: false},
	{locSam: 'Noho', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Noho', locLucy: 'Amherst', moveLucyNoho: true, moveSamNoho: false, moveThelmaNoho: false},
	{locSam: 'Noho', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Amherst', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Amherst', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: true, moveThelmaNoho: false},
	]

var worldPrior = function() {
	return uniformDraw(worlds)
}

var perspectives = [
{holder: speaker},
{holder: addressee}]

var perspectiveSelect = {
	'You are coming to Northampton' : function(){ return {holder: speaker}},
	'You are going to Northampton' : function(){ return {holder: speaker}},
	'I am coming to Northampton' : function(){ return {holder: addressee}},
	'I am going to Northampton' : function(){ return {holder: addressee}},
	'Thelma is coming to Northampton' : function(){ return uniformDraw(perspectives)},
	'Thelma is going to Northampton' : function(){ return uniformDraw(perspectives)},
  'I am walking to Northampton' : function(){ return uniformDraw(perspectives)},
  'Thelma is walking to Northampton' : function(){ return uniformDraw(perspectives)},
  'You are walking to Northampton' : function(){ return uniformDraw(perspectives)},
  'NULL' : function(){ return uniformDraw(perspectives)},
};

var perspectiveCost = function(perspective) {
	if(perspective.holder === speaker) {
	return 0 }
	else {
	return cost_setting
	}
}

var utteranceCost = function(utterance) {
	return 0
}

var utterances = [
'You are coming to Northampton',
'I am coming to Northampton',
'Thelma is going to Northampton',
'Thelma is coming to Northampton',
'I am going to Northampton',
'You are going to Northampton',
'You are walking to Northampton',
'I am walking to Northampton',
'Thelma is walking to Northampton',
'NULL']

var uttPrior = function() {
	return uniformDraw(utterances)
};

var gop_meaning = function(utterance, world, perspective){
  if ((utterance == 'Thelma is coming to Northampton' && (world.moveThelmaNoho && (((perspective.holder === speaker) && (world.locSam === 'Noho'))||((perspective.holder === addressee) && (world.locLucy === 'Noho'))))) ||
  (utterance == 'You are coming to Northampton' && (world.moveLucyNoho && (perspective.holder === speaker) && (world.locSam === 'Noho'))) ||
  (utterance == 'I am coming to Northampton' && (world.moveSamNoho && (perspective.holder === addressee) && (world.locLucy === 'Noho'))) ||
  (utterance == 'Thelma is going to Northampton' && (world.moveThelmaNoho && ((perspective.holder === speaker) && (world.locSam === 'Amherst')||(perspective.holder === addressee && world.locLucy === 'Amherst'))))||
  (utterance == 'You are going to Northampton' && (world.moveLucyNoho && ((perspective.holder === speaker) && (world.locSam === 'Amherst')||(perspective.holder === addressee && world.locLucy === 'Amherst'))))||
  (utterance == 'I am going to Northampton' && (world.moveSamNoho && ((perspective.holder === speaker) && (world.locSam === 'Amherst')||(perspective.holder === addressee && world.locLucy === 'Amherst')))) ||
  (utterance == 'I am walking to Northampton' && world.moveSamNoho) ||
  (utterance == 'You are walking to Northampton' && world.moveLucyNoho) ||
  (utterance == 'Thelma is walking to Northampton' && world.moveThelmaNoho) ||
  (utterance == 'NULL')
  ){
  	return 1
  } else {
  	return 0
  }
}

var nogop_meaning = function(utterance, world, perspective){
  if ((utterance == 'Thelma is coming to Northampton' && (world.moveThelmaNoho && (((perspective.holder === speaker) && (world.locSam === 'Noho'))||((perspective.holder === addressee) && (world.locLucy === 'Noho'))))) ||
   (utterance == 'You are coming to Northampton' && (world.moveLucyNoho && (perspective.holder === speaker) && (world.locSam === 'Noho'))) ||
  (utterance == 'I am coming to Northampton' && (world.moveSamNoho && (perspective.holder === addressee) && (world.locLucy === 'Noho'))) ||
  (utterance == 'Thelma is going to Northampton' && world.moveThelmaNoho) ||
  (utterance == 'You are going to Northampton' && world.moveLucyNoho) ||
  (utterance == 'I am walking to Northampton' && world.moveSamNoho) ||
  (utterance == 'You are walking to Northampton' && world.moveLucyNoho) ||
  (utterance == 'Thelma is walking to Northampton' && world.moveThelmaNoho) ||
  (utterance == 'I am going to Northampton' && world.moveSamNoho) ||
  (utterance == 'NULL')){
  	return 1
  } else {
  	return 0
  }
}

var marg_perspective = function(utt,perspective){
  var probs = map(function(w){gop_meaning(utt,w,perspective)},worlds)
  return Math.sum(probs)
}

var literalListener = function(utterance,perspective){
   return Infer({model: function(){
   condition(perspective)
   var world = worldPrior()
   var meaning = gop_meaning(utterance,world,perspective)
   condition(meaning)
   return world
   }})
};

var literalSpeaker = function(world) {
  return Infer({model: function(){
    var utt = uttPrior()
    var pPrior = perspectiveSelect[utt]
    var p = pPrior()
    var margP = marg_perspective(utt,p)
    factor(((literalListener(utt,p).score(world)*margP)-perspectiveCost(p)))
    return {utterance: utt,perspective: p}
  }})
}

var pragmaticListener = function(u) {
  return Infer({model: function(){
    var pPrior = perspectiveSelect[u]
    var p = pPrior()
    var w = worldPrior()
    factor(literalSpeaker(w).score({utterance:u,perspective: p}))
    return {world: w,perspective: p}
  }})
}

var pragmaticSpeaker = function(w) {
  return Infer({model: function(){
    var utt = uttPrior()
    var pPrior = perspectiveSelect[utt]
    var p = pPrior()
    factor((pragmaticListener(utt).score({world: w,perspective: p})-perspectiveCost(p)))
    return {utterance: utt,perspective: p}
  }})
}

//display(stringify(literalSpeaker(worlds[6])));

//console.log(utterances[0]);
//display(stringify(pragmaticListener(utterances[0])));

printAll(utterances,pragmaticListener,cost_setting);