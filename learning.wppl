var cost_setting = process.argv[3];

var stringify = function(x){return JSON.stringify(x)}

var printOne = function(x,f,c){
  console.log("Cost: "+c)
  console.log("Utterance: "+stringify(x));
  console.log("Evidence: "+stringify(f(x)));
  return
}

var printAll = function(arr,f,c){
  map(function(x){printOne(x,f,c)},arr);
  return
}

var worlds = [
  {"Major": "German", "School": "University of New Orleans", "Name": "Nancy", "Location Preference": "outdoor"},
  {"Major": "Astronomy", "School": "Franklin Pierce Law Center", "Name": "Nathan", "Location Preference": "outdoor"}, 
  {"Major": "German", "School": "State University of New York at Buffalo", "Name": "Daniel", "Location Preference": "outdoor"}, 
  {"Major": "Adult & Continuing Education", "School": "Canisius College", "Name": "Gary", "Location Preference": "indoor"}, 
  {"Major": "Veterinary Sciences", "School": "Marymount University", "Name": "Gary", "Location Preference": "outdoor"}, 
  {"Major": "Hispanic-American Studies", "School": "Franklin Pierce Law Center", "Name": "Gerald", "Location Preference": "outdoor"}, 
  {"Major": "Electrical Engineering", "School": "University of Dallas", "Name": "Gary", "Location Preference": "outdoor"}, 
  {"Major": "Astronomy", "School": "Saint Mary's College of California", "Name": "Nathan", "Location Preference": "outdoor"},
  {"Major": "Ceramic Engineering", "Location Preference": "outdoor", "Name": "Nathan", "Company": "Commercial Metals Company"}, 
  {"Major": "Social Work & Social Services", "Location Preference": "outdoor", "Name": "Mary", "Company": "Commercial Metals Company"}
  ]

var worldPrior = function() {
	return uniformDraw(worlds)
}

var utteranceCost = function(utterance) {
	return 0
}

var utterances = [
'They are a student',
'They work',
'They are female',
'They are male',
'Their name starts with N',
//'Their name is Nancy',
'Their name is Nathan',
//'Their name is Daniel',
//'Their name is Gary',
//'Their name is Gerald',
//'Their name is Mary',
//'They study German',
//'They study Astronomy',
//'They study Veterinary Sciences',
//'They study Engineering',
//'They study a social science',
//'They study a humanity',
//'They study a science',
'They like being outdoors',
'They like being indoors',
'NULL'
]

var uttPrior = function() {
	return uniformDraw(utterances)
};

var get_meaning = function(utterance, world){
  if ((utterance == 'They are a student' && world["Company"] == null) ||
   (utterance == 'They work' && world["Company"]) ||
   (utterance == 'They are female' && world["Name"] == 'Nancy' || world["Name"] == 'Mary') ||
   (utterance == 'They are male' && world["Name"] != 'Nancy' && world["Name"] != 'Mary') ||
   (utterance == 'Their name is Nathan' && world["Name"] == 'Nathan') ||
   (utterance == 'Their name starts with N' && world["Name"] == 'Nathan' || world["Name"] == 'Nancy') ||
   (utterance == 'They like being outdoors' && world["Location Preference"] == "outdoor") ||
   (utterance == 'They like being indoors' && world["Location Preference"] == "indoor") ||
   (utterance == 'NULL')
   ){
  	return 1
} else {
  return 0
}
}

var marg_perspective = function(utt,p){
  var probs = map(function(w){get_meaning(utt,w)},worlds)
  return Math.sum(probs)
  //var sums = map(function(arr){Math.sum(arr)},probs)
  //return Math.sum(sums)
}

var literalListener = function(utterance){
   return Infer({model: function(){
   var world = worldPrior()
   var meaning = get_meaning(utterance,world)
   condition(meaning)
   return world
   }})
};

var literalSpeaker = function(world) {
  return Infer({model: function(){
    var utt = uttPrior()
    factor(literalListener(utt).score(world))
    return {utterance: utt}
  }})
}

var pragmaticListener = function(u) {
  return Infer({model: function(){
    var w = worldPrior()
    factor(literalSpeaker(w).score({utterance:u}))
    return {world: w}
  }})
}

var run_generation = function(gen){
  console.log("Gen "+stringify(gen))
  var wObs = worldPrior()
  console.log("Observed: "+stringify(wObs))
  var poss_utterances = literalSpeaker(wObs)
  var pMax = maxU(poss_utterances)
  var actual_u = pMax['utterance']
  console.log("Uttered: "+stringify(actual_u))
  console.log("Interpretation: "+stringify(pragmaticListener(actual_u)))
}

var maxU = function(d){
  var uts = d['params']['dist']
  var keys = Object.keys(uts)
  var us = map(function(k){uts[k]['val']['utterance']},keys)
  var probs = map(function(k){uts[k]['prob']},keys)
  var pairs = map2(function(x,y){return {'utterance' : x, 'prob':y}},us,probs)
  var pMax = reduce(function(x,y){return x['prob']>y['prob']?x:y}, {'utterance' : '', 'prob': 0},pairs)
  return pMax
}

//display(stringify(literalSpeaker(worlds[6])));

//console.log(utterances[0]);
//display(stringify(pragmaticListener(utterances[0])));
//
/*if(process.argv[5]=='speaker'){
  printAll(worlds,literalSpeaker,cost_setting);
  } else{
  printAll(utterances,pragmaticListener,cost_setting);
  }*/
var gens = [1,2,3,4,5]
map(function(g){run_generation(g)},gens)