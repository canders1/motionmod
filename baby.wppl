var speaker = 'Sarah';
var addressee = 'Jane'

var worldPrior = function() {
	return uniformDraw([
	{locSarah: 'Amherst', locJane: 'Amherst', moveJaneNoho: true, moveSarahNoho: false, moveElizaNoho: false},
	{locSarah: 'Amherst', locJane: 'Amherst', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	{locSarah: 'Amherst', locJane: 'Amherst', moveJaneNoho: false, moveSarahNoho: true, moveElizaNoho: false},
	//{locSarah: 'Noho', locJane: 'Noho', moveJaneNoho: true, moveSarahNoho: false, moveElizaNoho: false},
	{locSarah: 'Noho', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	//{locSarah: 'Noho', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: true, moveElizaNoho: false},
	{locSarah: 'Noho', locJane: 'Amherst', moveJaneNoho: true, moveSarahNoho: false, moveElizaNoho: false},
	{locSarah: 'Noho', locJane: 'Amherst', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	//{locSarah: 'Noho', locJane: 'Amherst', moveJaneNoho: false, moveSarahNoho: true, moveElizaNoho: false},
	//{locSarah: 'Amherst', locJane: 'Noho', moveJaneNoho: true, moveSarahNoho: false, moveElizaNoho: false},
	{locSarah: 'Amherst', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},
	{locSarah: 'Amherst', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: true, moveElizaNoho: false},
	])
}

var perspectiveVals = [
{holder: speaker},
{holder: addressee}]

//var perspectivePrior = dirichlet(ones([perspectiveVals.length,1]))

//var perspectives = Categorical({vs: perspectiveVals, ps: perspectivePrior});

var perspectives = Categorical({vs: perspectiveVals});

var perspectiveCost = function(perspective) {
	if(perspective.holder === speaker) {
	return 0 }
	else {
	return 0.5
	}
}

var utteranceCost = function(utterance) {
	return 0
}

var utterances = [
'You are coming to Northampton',
'I am coming to Northampton',
'Eliza is going to Northampton',
'Eliza is coming to Northampton',
'I am going to Northampton',
'You are going to Northampton']

var uttPrior = function() {
	return uniformDraw(utterances)};

//Should the 'going' sentences require that the perspective holder not be in the location or just that the person is moving (default)?
//This set-up allows redundant moving to X when already located in X utterances
var meaning = function(utterance, world, perspective){
  return utterance == 'Eliza is coming to Northampton' ? (world.moveElizaNoho && (((perspective.holder === speaker) && (world.locSarah === 'Noho'))||((perspective.holder === addressee) && (world.locJane === 'Noho')))):
  utterance == 'You are coming to Northampton' ? (world.moveJaneNoho && (perspective.holder === speaker) && (world.locSarah === 'Noho')):
  utterance == 'I am coming to Northampton' ? (world.moveSarahNoho && (perspective.holder === addressee) && (world.locJane === 'Noho')):
  utterance == 'Eliza is going to Northampton' ? world.moveElizaNoho:
  utterance == 'You are going to Northampton' ? world.moveJaneNoho:
  utterance == 'I am going to Northampton' ? world.moveSarahNoho 
  //utterance == 'Eliza is going to Northampton' ? (world.moveElizaNoho && ((perspective.holder === speaker) && (world.locSarah === 'Amherst')||(perspective.holder === addressee && world.locJane === 'Amherst'))):
  //utterance == 'You are going to Northampton' ? (world.moveJaneNoho && ((perspective.holder === speaker) && (world.locSarah === 'Amherst')||(perspective.holder === addressee && world.locJane === 'Amherst'))):
  //utterance == 'I am going to Northampton' ? (world.moveSarahNoho && ((perspective.holder === speaker) && (world.locSarah === 'Amherst')||(perspective.holder === addressee && world.locJane === 'Amherst')))
  : true
}

var literalListener = cache(function(utterance,perspective){
  Infer({method:'enumerate'}, function(){
    var world = worldPrior();
    var uttTruthVal = meaning(utterance, world, perspective);
    if(uttTruthVal){
    //condition(uttTruthVal == true)
    //console.log(world);
    return world;
    }else{
    return 0;
    }
  });
});

var newLiteralSpeaker = cache(function(world,perspective){
   	var scores = map(function(x)
   				{return literalListener(x,perspective).score(world)},
   				utterances);
	var scores2 = map(function(x)
	                 {return x-perspectiveCost(perspective)-utteranceCost(x)},scores);
	var pairs = map2(function(x,y){return {'utterance' : y, 'probability':x}},scores2,utterances);
	return pairs;
	}
);

var evalLitSpeaker = cache(function(utterance,world,perspective){
	var pairs = newLiteralSpeaker(world,perspective);
	var res = find(function(x){return x.utterance===utterance},pairs)
	return res.probability;
}
);


var newPragmaticListener = cache(function(utterance){
	Infer({method:'enumerate'}, function(){
	var world = worldPrior();
	var perspective = sample(perspectives);
	factor(evalLitSpeaker(utterance,world,perspective));
	return [world,perspective]
	});
});

var literalSpeaker = cache(function(world,perspective){

	Infer({method:'enumerate'}, function(){
	var utterance = uttPrior();
	var lit = literalListener(utterance,perspective).score(world);
    var post = lit - perspectiveCost(perspective) - utteranceCost(utterance);
	factor(post);
	return utterance;
	});
});

var pragmaticListener = cache(function(utterance){
	Infer({method:'enumerate'}, function(){
	var world = worldPrior();
	var perspective = sample(perspectives);
	factor(literalSpeaker(world,perspective).score(utterance));
	return [world,perspective]
	});
});

//console.log(newliteralSpeaker({locSarah: 'Amherst', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},sample(perspectives)));
//literalListener('Eliza is coming to Northampton',{holder: addressee})
//console.log(literalSpeaker({locSarah: 'Amherst', locJane: 'Noho', moveJaneNoho: false, moveSarahNoho: false, moveElizaNoho: true},sample(perspectives)));
//console.log(newPragmaticListener("I am coming to Northampton"));

var printAll = function(utterances){
  if (utterances.length == 0){
    return
    }
  else {
    console.log(utterances[0]);
    console.log(Infer({method: 'MCMC',samples: 100000,lag:1000,burn:1000, model: function(){return newPragmaticListener(utterances[0])}}));
    printAll(utterances.slice(1))
    }
}
printAll(utterances);