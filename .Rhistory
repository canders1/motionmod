ifelse(grepl("go",utterance),"Go","Walk")))
ggplot(data=subset(list_none,(cost==0|cost==1|cost==0.5)&(grepl("List",Condition)|grepl("Moving None",Condition))),aes(x=verb,y=marg.prob,fill=cost,group=cost)) + geom_col(position="dodge") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", breaks=c("Come", "Go", "Walk"),na.translate = TRUE, na.value=0.0, drop=FALSE) + theme(legend.position="none",text=element_text(size=14))
ggsave(paste0(datad,"pmarg_SmoveTmove_gop_new.pdf"),height=3,width=12)
sm <- pmarg_moveSam_gop %>% mutate(Condition = paste0("Speaker Moving ",Condition))
list_none <- rbind(pmarg_moveThelma_gop,sm)
list_none <- list_none %>% mutate(verb = ifelse(grepl("com",utterance),
"Come",
ifelse(grepl("go",utterance),"Go","Walk")))
ggplot(data=subset(list_none,(cost==0|cost==1|cost==0.5)&(grepl("List",Condition)|grepl("Moving None",Condition))),aes(x=verb,y=marg.prob,fill=cost,group=cost)) + geom_col(position="dodge") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_manual(name ="Utterance", breaks=c("Come", "Go", "Walk")) + theme(legend.position="none",text=element_text(size=14))
sm <- pmarg_moveSam_gop %>% mutate(Condition = paste0("Speaker Moving ",Condition))
list_none <- rbind(pmarg_moveThelma_gop,sm)
list_none <- list_none %>% mutate(verb = ifelse(grepl("com",utterance),
"Come",
ifelse(grepl("go",utterance),"Go","Walk")))
ggplot(data=subset(list_none,(cost==0|cost==1|cost==0.5)&(grepl("List",Condition)|grepl("Moving None",Condition))),aes(x=verb,y=marg.prob,fill=cost,group=cost)) + geom_col(position="dodge") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", breaks=c("Come", "Go", "Walk")) + theme(legend.position="none",text=element_text(size=14))
ggsave(paste0(datad,"pmarg_SmoveTmove_gop_new.pdf"),height=3,width=12)
library(lme4)
library(MASS)
library(lmtest)
library(lmerTest)
require(car)
library(reshape2)
library(tidyverse)
#library(lmerTest)
#library(lsmeans)
#library(RePsychLing)
#import data
n <- c("receiveTime", "participant", "controller", "item", "type", "group","question","answer", "go","come","manner","bring","take","here","Q","tense","subj","dest")
pairs1 <- read.csv('~/dissertation/experiments/production_2/results/annotated_results_carolyn.tsv',header=FALSE,sep="\t",col.names=n,comment.char = "#")
exclude.list <- c("603a667d326fc4b4efe9fbea7618d2be","28779078f1c1fe0c9519b144d14d2409","380cd3bceb45e34166245a6140b892be","3b650a5ef942c08bc7928467eef26117","b5181f3a9eb0a11869191d1c71a13bab","82d0f3b8a4e6670b6b659a7eb3e60389","824b5b76a1fb7d254d02e1ae4d6404bd") #Participants' debriefing answers were incoherent
pairs1 <- subset(pairs1, !(participant %in% exclude.list))
#import data
n <- c("receiveTime", "participant", "controller", "item", "element", "type", "group", "question", "answer", "go","come","manner","bring","take","here","Q","tense","subj","dest")
pairs2 <- read.csv('~/dissertation/experiments/production/results/production_results_annotated.csv',header=FALSE,col.names=n,comment.char = "#")
exclude.list2 <- c("5b6addc9033f1200015e8975") #Participant reported that they mixed up the characters
pairs2 <- subset(pairs2, !(participant == "86dd8f54673d9c819e481b6eba0301b7"))
pairs2 <- subset(pairs2,select=-c(element))
pairs <- rbind(pairs1,pairs2)
#Separate into training items, comics, fillers, aq, and survey items
survey <- pairs[pairs$controller=='Form',]
survey <- subset(survey,select=-c(go,come,manner,bring,take,here,Q,tense,subj,dest))
sform <- dcast(survey, participant ~ question,value='answer')
space <- pairs[pairs$controller=='SpatialProduction',]
#pairs <- pairs %>% mutate(answer = lag(group))
comics <- subset(pairs,controller=='ComicProduction')
comics <- merge(comics,sform,by="participant")
comics$type <- as.character(comics$type)
comics$item <- as.factor(comics$item)
comics <- comics %>% group_by(participant,item) %>% mutate(type = replace(type, grepl("item-t-both",type,fixed=TRUE), "item-t-both"),
type = replace(type,grepl("item-t-none",type,fixed=TRUE),"item-t-none"),
type = replace(type,grepl("item-t-speaker",type,fixed=TRUE),"item-t-speaker"),
type = replace(type,grepl("item-t-listener",type,fixed=TRUE),"item-t-listener"),
type = replace(type,grepl("item-not-listener",type,fixed=TRUE),"item-fix-not-none"),
type = replace(type,grepl("item-not-none",type,fixed=TRUE),"item-fix-not-listener"),
type = replace(type,grepl("item-speaker",type),"item-t-speaker"),
type = replace(type,grepl("item-both",type),"item-t-both"),
type = replace(type,grepl("item-listener",type),"item-t-listener"),
type = replace(type,grepl("item-none",type),"item-t-none")) #To fix error with not items!
comics$type <- factor(comics$type)
comics <- comics %>% group_by(participant,item) %>%
mutate(real.go = ifelse(go == 1 && tense == 0 && subj == "base" && dest=="right",1,0),
real.come = ifelse(come == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
real.manner = ifelse(manner == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
real.bring = ifelse(bring == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
real.take = ifelse(take == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
come.numeric = as.numeric(as.character(come)))
comics <- comics %>% group_by(participant,item) %>% mutate(real.other = ifelse(real.go==0 && real.come==0 && real.manner == 0 & real.bring == 0 & real.take == 0,1,0))
View(comics)
comics$Ethnicity <- tolower(comics$Ethnicity)
comics$Gender <- tolower(comics$Gender)
comics <- comics %>% group_by(Ethnicity) %>% mutate(ethnicity = ifelse(grepl("multi",Ethnicity)|grepl("bi",Ethnicity)|grepl("mixed",Ethnicity)|grepl(" and ",Ethnicity),
"multi",
ifelse(grepl("white",Ethnicity)|grepl("caucas",Ethnicity)|grepl("english",Ethnicity)|grepl("slavic",Ethnicity),
"white",
ifelse(grepl("black",Ethnicity)|grepl("afric",Ethnicity),
"black",
ifelse(grepl("hispan",Ethnicity)|grepl("latin",Ethnicity)|grepl("mexi",Ethnicity),
"latinx",
ifelse(grepl("asian",Ethnicity),
"asian","other"))))),
gender = ifelse(grepl("fem",Gender),"female",
ifelse(grepl("male",Gender),"male",
ifelse(grepl("f",Gender),"female",
ifelse(grepl("m",Gender),"male","other")))))
#Check balance of latin square:
main <- subset(comics,grepl("item",type,fixed=TRUE))
main$type <- factor(main$type)
check.tabs <- subset(main,as.numeric(as.character(group)) < 7)
check.tabs$type <- droplevels(check.tabs$type)
check.tabs$group <- droplevels(check.tabs$group)
xtabs(~group+type,data=check.tabs) #tabulate to check latin square design
#should have 11 in listener
comics$group <- as.numeric(as.character(comics$group))
main.items <- subset(comics,grepl("item",type,fixed=TRUE))
main.items$type <- droplevels(main.items$type)
length(subset(main.items,type=="item-t-both")$answer)
length(subset(main.items,type=="item-t-speaker")$answer)
length(subset(main.items,type=="item-t-listener")$answer)
length(subset(main.items,type=="item-t-none")$answer)
length(unique(main.items$participant))
#12 instances of each condition per
#1872 total responses
#1908 responses since non-other categories can be double-counted
mean.by.participant <- main.items %>% group_by(participant,type) %>% summarize(mean(real.come),mean(real.go),mean(real.bring),mean(real.manner),mean(here))
View(main)
subset(main.items,dest!='right') %>% summmarize(count(come),count(go),count(manner))
subset(main.items,dest!='right') %>% summarize(count(come),count(go),count(manner))
wrong.dest <- subset(main.items,dest!='right')
wrong.dest %>% summarize(count(come),count(go),count(manner))
View(wrong.dest)
wrong.dest <- subset(main.items,dest!='right')
wrong.dest %>% summarize(come,go,manner)
wrong.dest <- subset(main.items,dest!='right')
wrong.dest %>% summarize(n(come),n(go),n(manner))
wrong.dest <- subset(main.items,dest!='right')
wrong.dest %>% group_by(type) %>% summarize(n(come),n(go),n(manner))
wrong.dest <- subset(main.items,dest!='right')
wrong.dest %>% group_by(type) %>% summarize(mean(come),mean(go),mean(manner))
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
View(main.items)
comics$type <- as.character(comics$type)
comics$item <- as.factor(comics$item)
comics <- comics %>% group_by(participant,item) %>% mutate(type = replace(type, grepl("item-t-both",type,fixed=TRUE), "item-t-both"),
type = replace(type,grepl("item-t-none",type,fixed=TRUE),"item-t-none"),
type = replace(type,grepl("item-t-speaker",type,fixed=TRUE),"item-t-speaker"),
type = replace(type,grepl("item-t-listener",type,fixed=TRUE),"item-t-listener"),
type = replace(type,grepl("item-not-listener",type,fixed=TRUE),"item-fix-not-none"),
type = replace(type,grepl("item-not-none",type,fixed=TRUE),"item-fix-not-listener"),
type = replace(type,grepl("item-speaker",type),"item-t-speaker"),
type = replace(type,grepl("item-both",type),"item-t-both"),
type = replace(type,grepl("item-listener",type),"item-t-listener"),
type = replace(type,grepl("item-none",type),"item-t-none")) #To fix error with not items!
comics$type <- factor(comics$type)
comics <- comics %>% group_by(participant,item) %>%
mutate(real.go = ifelse(go == 1 && tense == 0 && subj == "base" && dest=="right",1,0),
real.come = ifelse(come == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
real.manner = ifelse(manner == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
real.bring = ifelse(bring == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
real.take = ifelse(take == 1 && tense == 0 && subj == "base"&& dest=="right",1,0),
come.numeric = as.numeric(as.character(come)))
comics <- comics %>% group_by(participant,item) %>% mutate(real.other = ifelse(real.go==0 && real.come==0 && real.manner == 0 & real.bring == 0 & real.take == 0,1,0))
comics$Ethnicity <- tolower(comics$Ethnicity)
comics$Gender <- tolower(comics$Gender)
comics <- comics %>% group_by(Ethnicity) %>% mutate(ethnicity = ifelse(grepl("multi",Ethnicity)|grepl("bi",Ethnicity)|grepl("mixed",Ethnicity)|grepl(" and ",Ethnicity),
"multi",
ifelse(grepl("white",Ethnicity)|grepl("caucas",Ethnicity)|grepl("english",Ethnicity)|grepl("slavic",Ethnicity),
"white",
ifelse(grepl("black",Ethnicity)|grepl("afric",Ethnicity),
"black",
ifelse(grepl("hispan",Ethnicity)|grepl("latin",Ethnicity)|grepl("mexi",Ethnicity),
"latinx",
ifelse(grepl("asian",Ethnicity),
"asian","other"))))),
gender = ifelse(grepl("fem",Gender),"female",
ifelse(grepl("male",Gender),"male",
ifelse(grepl("f",Gender),"female",
ifelse(grepl("m",Gender),"male","other")))))
#Check balance of latin square:
main <- subset(comics,grepl("item",type,fixed=TRUE))
main$type <- factor(main$type)
check.tabs <- subset(main,as.numeric(as.character(group)) < 7)
check.tabs$type <- droplevels(check.tabs$type)
check.tabs$group <- droplevels(check.tabs$group)
xtabs(~group+type,data=check.tabs) #tabulate to check latin square design
#should have 11 in listener
comics$group <- as.numeric(as.character(comics$group))
main.items <- subset(comics,grepl("item",type,fixed=TRUE))
main.items$type <- droplevels(main.items$type)
length(subset(main.items,type=="item-t-both")$answer)
length(subset(main.items,type=="item-t-speaker")$answer)
length(subset(main.items,type=="item-t-listener")$answer)
length(subset(main.items,type=="item-t-none")$answer)
length(unique(main.items$participant))
#12 instances of each condition per
#1872 total responses
#1908 responses since non-other categories can be double-counted
mean.by.participant <- main.items %>% group_by(participant,type) %>% summarize(mean(real.come),mean(real.go),mean(real.bring),mean(real.manner),mean(here))
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(go~come,data=wrong.dest)
xtabs(go~come,data=wrong.subj)
xtabs(go~come,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come+go+manner,data=wrong.dest)
xtabs(~come+go+manner,data=wrong.subj)
xtabs(~come+go+manner,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come*go*manner,data=wrong.dest)
xtabs(~come+go+manner,data=wrong.subj)
xtabs(~come+go+manner,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come+go+manner,data=wrong.dest)
xtabs(~come+go+manner,data=wrong.subj)
xtabs(~come+go+manner,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come+go,data=wrong.dest)
xtabs(~come+go,data=wrong.subj)
xtabs(~come+go,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come,data=wrong.dest)
xtabs(~come,data=wrong.subj)
xtabs(~come,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come,data=wrong.dest)
xtabs(~come,data=wrong.tense)
xtabs(~go,data=wrong.dest)
xtabs(~go,data=wrong.tense)
xtabs(~manner,data=wrong.dest)
xtabs(~manner,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come,data=main,items)
xtabs(~go,data=main,items)
xtabs(~manner,data=main,items)
xtabs(~come,data=wrong.dest)
xtabs(~come,data=wrong.tense)
xtabs(~go,data=wrong.dest)
xtabs(~go,data=wrong.tense)
xtabs(~manner,data=wrong.dest)
xtabs(~manner,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come,data=main,items)
xtabs(~come,data=wrong.dest)
xtabs(~come,data=wrong.tense)
xtabs(~go,data=main,items)
xtabs(~go,data=wrong.dest)
xtabs(~go,data=wrong.tense)
xtabs(~manner,data=main,items)
xtabs(~manner,data=wrong.dest)
xtabs(~manner,data=wrong.tense)
xtabs(~type,data=main.items)
wrong.dest <- subset(main.items,dest!='right')
xtabs(~type,data=wrong.dest)
wrong.subj <- subset(main.items,subj!='base')
xtabs(~type,data=wrong.subj)
wrong.tense <- subset(main.items,tense!=0)
xtabs(~type,data=wrong.tense)
xtabs(~come,data=main.items)
xtabs(~come,data=wrong.dest)
xtabs(~come,data=wrong.tense)
xtabs(~go,data=main.items)
xtabs(~go,data=wrong.dest)
xtabs(~go,data=wrong.tense)
xtabs(~manner,data=main.items)
xtabs(~manner,data=wrong.dest)
xtabs(~manner,data=wrong.tense)
# Chunk 1
library(dplyr)
library(ggplot2)
# Chunk 2
#import data
get.number <- function(x) {
if(x=="N A S"){return("W1")}
else {
if(x=="A A S"){return("W2")}
else{
if(x=="A N L"){return("W3")}
else{
if(x=="A A L"){return("W4")}
else{
if(x=="N N T"){return("W5")}
else{
if(x=="A A T"){return("W6")}
else{
if(x=="N A T"){return("W7")}
else{
if(x=="A N T"){return("W8")}
else{
if(x=="E E T"){return("W9")}
else{cat("\nNOT FOUND")}}}}}}}}}
}
get.label <- function(x) {
if(x=="N A S"){return("Listener")}
else {
if(x=="A A S"){return("None")}
else{
if(x=="A N L"){return("Speaker")}
else{
if(x=="A A L"){return("None")}
else{
if(x=="N N T"){return("Both")}
else{
if(x=="A A T"){return("None")}
else{
if(x=="N A T"){return("Listener")}
else{
if(x=="A N T"){return("Speaker")}
else{cat("\nNOT FOUND")}}}}}}}}
}
n <- c("go","cost","utterance","perspective","locSam","locLucy","moveLucy", "moveSam","moveThelma","probability")
# Chunk 3
datanm = "speaker_basic"
#datanm = "speaker_basic_simple"
#datanm = "speaker_sampled_pcost"
#datanm = "speaker_nonu_w"
#datanm = "speaker_nonu_apart_w"
#datanm = "speaker_speaker_bias"
#datanm = "speaker_listener_cost"
#datanm = "speaker_sample_wp"
#datanm = "speaker_speaker_default"
datad = paste0('img/',datanm,'_')
# Chunk 4
prob_pairs = TRUE
if(datanm == "speaker_basic"){
nogop_n = 'speaker_aug_nogop.csv'
gop_n = 'speaker_aug_gop.csv'
prob_n = 'speaker_aug_prob.csv'
}
if(datanm == "speaker_basic_simple"){
nogop_n = 'speaker_simple_nogop.csv'
gop_n = 'speaker_simple_gop.csv'
prob_n = 'speaker_simple_prob.csv'
}
if(datanm == "speaker_sampled_pcost"){
nogop_n = 'speaker_ucost_aug_nogop.csv'
gop_n = 'speaker_ucost_aug_gop.csv'
prob_n = 'speaker_ucost_aug_prob.csv'
}
if(datanm == "speaker_nonu_w"){
nogop_n = 'speak_nonu_aug_nogop.csv'
gop_n = 'speak_nonu_aug_gop.csv'
prob_n = 'speak_nonu_aug_prob.csv'
}
if(datanm == "speaker_nonu_apart_w"){
nogop_n = 'speak_nonu_apart_nogop.csv'
gop_n = 'speak_nonu_apart_gop.csv'
prob_n = 'speak_nonu_apart_prob.csv'
}
if(datanm == "speaker_speaker_bias"){
nogop_n = 'irr_speaker_nogop.csv'
gop_n = 'irr_speaker_gop.csv'
prob_n = 'irr_speaker_prob.csv'
}
if(datanm == "speaker_sample_wp"){
nogop_n = 'speaker_sample_wp_nogop.csv'
gop_n = 'speaker_sample_wp_gop.csv'
prob_n = 'speaker_sample_wp_prob.csv'
}
if(datanm == "speaker_listener_cost"){
nogop_n = 'speaker_lcost_nogop.csv'
gop_n = 'speaker_lcost_gop.csv'
prob_n = 'speaker_lcost_prob.csv'
}
if(datanm == "speaker_listener_cost"){
nogop_n = 'speaker_lcost_nogop.csv'
gop_n = 'speaker_lcost_gop.csv'
prob_n = 'speaker_lcost_prob.csv'
}
if(datanm == "speaker_speaker_default"){
nogop_n = 'speaker_default_speaker_nogop.csv'
gop_n = 'speaker_default_speaker_gop.csv'
prob_n = 'speaker_default_speaker_prob.csv'
}
# Chunk 5
prob.pairs <- read.csv(prob_n,header=FALSE,col.names=n,comment.char = "#",stringsAsFactors=TRUE)
nogop.pairs <- read.csv(nogop_n,header=FALSE,col.names=n,comment.char = "#",stringsAsFactors=TRUE)
gop.pairs <- read.csv(gop_n,header=FALSE,col.names=n,comment.char = "#",stringsAsFactors=TRUE)
pairs <- rbind(rbind(nogop.pairs,prob.pairs),gop.pairs)
pairs <- pairs %>% mutate(go.is.p = ifelse(grepl('prob',go,fixed=TRUE),
'prob',
ifelse(grepl('nogop',go,fixed=TRUE),
'nogop',
'gop')))
pairs$go.is.p <- factor(pairs$go.is.p, levels=c('gop','nogop','prob'))
# Chunk 6
pairs$probability <- as.numeric(as.character(pairs$probability))
pairs <- pairs %>% rowwise() %>% mutate(mover=ifelse(moveSam=='true',"S",ifelse(moveLucy=='true',"L","T")))
pairs <- pairs %>% rowwise() %>% mutate(world=paste("L in",substr(toString(locLucy),1,1),"\n S in",substr(toString(locSam),1,1)))
# Chunk 7
pairs <- pairs %>% rowwise() %>% mutate(world1=paste(substr(toString(locLucy),1,1),substr(toString(locSam),1,1),substr(toString(mover),1,1)))
pairs <- pairs %>% rowwise() %>% mutate(worldNum = get.number(world1),
Condition = get.label(world1))
pairs <- pairs %>% rowwise() %>% mutate(world=paste(world,"\n",worldNum))
# Chunk 8
pairs$go.is.p <- as.factor(pairs$go.is.p)
p_marginals <- pairs %>% group_by(go.is.p,world1,utterance,cost) %>% mutate(marg.prob = sum(probability))
u_marginals <- pairs %>% group_by(go.is.p,world,perspective,cost) %>% mutate(marg.prob = sum(probability))
summarize(subset(p_marginals,grepl("Thelma",utterance,fixed=TRUE)), pmarg = unique(marg.prob))
# Chunk 9
pairs <- pairs %>% mutate(perspective.and.utterance = paste(as.character(perspective),paste("\n",as.character(utterance))))
facet_labs <- c(Lucy = "Perspective holder = Lucy", Sam = "Perspective holder = Sam")
facet_go_labs <- c(gop="Perspectival go",nogop="Plain go",prob="Lex. uncertain go")
# Chunk 10
moveThelma <- subset(pairs, as.character(utterance)=='Thelma is coming to Northampton' | as.character(utterance)=='Thelma is going to Northampton' | as.character(utterance)=='Thelma is walking to Northampton')
moveSam <- subset(pairs, moveSam=="true")
moveThelma.nogop <- subset(moveThelma, go.is.p=='nogop')
ggplot(data=moveThelma,mapping=aes(x=Condition,y=probability,size=cost,shape=utterance,color=perspective)) + geom_point() + facet_wrap(moveThelma$go.is.p) + ylim(0,1)
ggsave(paste0(datad,"Tmove.pdf"),width=12, height=5)
# Chunk 11
c1_moveThelma <- subset(moveThelma,cost==1)
ggplot(data=c1_moveThelma,mapping=aes(x=Condition,y=probability,size=cost,shape=utterance,color=perspective)) + geom_point() + facet_wrap(c1_moveThelma$go.is.p) + ylim(0,1)
ggsave(paste0(datad,"Tmove_cost1.pdf"),width=12, height=5)
# Chunk 12
c0_moveThelma <- subset(moveThelma,cost==0)
ggplot(data=c0_moveThelma,mapping=aes(x=world,y=probability,size=cost,shape=utterance,color=perspective)) + geom_point(position = position_dodge(width=0.99)) + facet_wrap(~go.is.p,labeller=as_labeller(facet_go_labs)) + ylim(0,1)
ggsave(paste0(datad,"Tmove_cost0.pdf"),width=12, height=5)
# Chunk 13
c0_moveThelma_noprob <- subset(c0_moveThelma,go.is.p!='prob')
ggplot(data=c0_moveThelma_noprob,mapping=aes(x=world,y=probability,size=cost,shape=utterance,color=utterance)) + geom_point() + facet_wrap(go.is.p~perspective,labeller=labeller(perspective = facet_labs,go.is.p=facet_go_labs)) + labs(shape="Utterance",color="Utterance") + guides(size=FALSE) + ylim(0,1)
ggsave(paste0(datad,"Tmove_cost0_noprob.pdf"),width=12, height=5)
# Chunk 14
pmarg_moveThelma <- subset(p_marginals, as.character(utterance)=='Thelma is coming to Northampton' | as.character(utterance)=='Thelma is going to Northampton' | as.character(utterance)=='Thelma is walking to Northampton' | as.character(utterance)=='NULL')
pmarg_moveSam <- subset(p_marginals, moveSam=="true")
ggplot(data=pmarg_moveThelma,mapping=aes(x=Condition,y=marg.prob,size=cost,color=utterance,shape=utterance)) + geom_point() + facet_wrap(~go.is.p,labeller=as_labeller(facet_go_labs)) + labs(size="Cost",color="Utterance",shape="Utterance") + ylim(0,1)
ggsave(paste0(datad,"pmarg_Tmove.pdf"),width=12, height=5)
# Chunk 15
f <- function(x) {
r <- quantile(x, probs = c(0, 0, 0.5, 1, 1))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
f2 <- function(x) {
r <- quantile(x, probs = c(0, 0.5, 1))
names(r) <- c("ymin", "y", "ymax")
r
}
pmarg_moveSam_nogop <- subset(subset(pmarg_moveSam,go.is.p=='nogop'),cost < 1.1)
pmarg_moveSam_gop <- subset(subset(pmarg_moveSam,go.is.p=='gop'),cost < 1.1)
pmarg_moveThelma_nogop <- subset(subset(pmarg_moveThelma,go.is.p=='nogop'),cost < 1.1)
pmarg_moveThelma_nogop$Condition <- factor(pmarg_moveThelma_nogop$Condition,levels = c("Both", "Speaker", "Listener", "None"))
ggplot(data=pmarg_moveThelma_nogop,aes(x=utterance,y=marg.prob,color=utterance)) + stat_summary(fun.data = f2, geom="crossbar") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", labels=c("Thelma is coming to Northampton" = "Come", "Thelma is going to Northampton" = "Go", "Thelma is walking to Northampton" = "Walk")) + theme(legend.position="none")
ggsave(paste0(datad,"pmarg_Tmove_nogop.pdf"),height=3,width=12)
ggplot(data=subset(pmarg_moveThelma_nogop,cost==0|cost==1|cost==0.5),aes(x=utterance,y=marg.prob,fill=cost,group=cost)) + geom_col(position="dodge") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", labels=c("Thelma is coming to Northampton" = "Come", "Thelma is going to Northampton" = "Go", "Thelma is walking to Northampton" = "Walk")) + theme(legend.position="none",text=element_text(size=14))
ggsave(paste0(datad,"pmarg_Tmove_nogop_new.pdf"),height=3,width=12)
ggplot(data=subset(pmarg_moveSam_nogop,cost==0|cost==1|cost==0.5),aes(x=utterance,y=marg.prob,fill=cost,group=cost)) + geom_col(position="dodge") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", labels=c("I am coming to Northampton" = "Come", "I am going to Northampton" = "Go", "I am walking to Northampton" = "Walk")) + theme(legend.position="none",text=element_text(size=14))
ggsave(paste0(datad,"pmarg_Smove_nogop_new.pdf"),height=3,width=12)
# Chunk 16
pmarg_moveThelma_prob <- subset(subset(pmarg_moveThelma,go.is.p=='prob'),cost < 1.1)
pmarg_moveThelma_prob$Condition <- factor(pmarg_moveThelma_prob$Condition,levels = c("Both", "Speaker", "Listener", "None"))
ggplot(data=subset(pmarg_moveThelma_prob,cost==0|cost==1|cost==0.5),aes(x=utterance,y=marg.prob,fill=cost,group=cost)) + geom_col(position="dodge") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", labels=c("Thelma is coming to Northampton" = "Come", "Thelma is going to Northampton" = "Go", "Thelma is walking to Northampton" = "Walk")) + theme(legend.position="none",text=element_text(size=14))
ggsave(paste0(datad,"pmarg_Tmove_prob_new.pdf"),height=3,width=12)
pmarg_moveThelma_gop <- subset(subset(pmarg_moveThelma,go.is.p=='gop'),cost < 1.1)
pmarg_moveThelma_gop$Condition <- factor(pmarg_moveThelma_gop$Condition,levels = c("Both", "Speaker", "Listener", "None"))
ggplot(data=pmarg_moveThelma_gop,aes(x=utterance,y=marg.prob,color=utterance)) + stat_summary(fun.data = f2, geom="crossbar") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", labels=c("Thelma is coming to Northampton" = "Come", "Thelma is going to Northampton" = "Go", "Thelma is walking to Northampton" = "Walk")) + theme(legend.position="none")
ggsave(paste0(datad,"pmarg_Tmove_gop.pdf"),height=3,width=12)
pmarg_moveThelma_prob <- subset(subset(pmarg_moveThelma,go.is.p=='prob'),cost < 1.1)
pmarg_moveThelma_prob$Condition <- factor(pmarg_moveThelma_prob$Condition,levels = c("Both", "Speaker", "Listener", "None"))
ggplot(data=pmarg_moveThelma_prob,aes(x=utterance,y=marg.prob,color=utterance)) + stat_summary(fun.data = f2, geom="crossbar") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", labels=c("Thelma is coming to Northampton" = "Come", "Thelma is going to Northampton" = "Go", "Thelma is walking to Northampton" = "Walk")) + theme(legend.position="none")
ggsave(paste0(datad,"pmarg_Tmove_prob.pdf"),height=3,width=12)
ggplot(data=subset(pmarg_moveThelma_gop,cost==0|cost==1|cost==0.5),aes(x=utterance,y=marg.prob,fill=cost,group=cost)) + geom_col(position="dodge") + facet_wrap(~Condition, nrow = 1) + ylim(0,1) + ylab("Marginal probability: p(u|w)") + scale_x_discrete(name ="Utterance", labels=c("Thelma is coming to Northampton" = "Come", "Thelma is going to Northampton" = "Go", "Thelma is walking to Northampton" = "Walk")) + theme(text=element_text(size=14))
ggsave(paste0(datad,"pmarg_Tmove_gop_new.pdf"),height=3,width=12)
