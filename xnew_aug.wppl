var cost_setting = process.argv[3];

var speaker = 'Sam';
var addressee = 'Lucy';

var stringify = function(x){return JSON.stringify(x)}

var printOne = function(x,f,c){
  console.log("Cost: "+c)
  console.log("Utterance: "+stringify(x));
  console.log("Evidence: "+stringify(f(x)));
  return
}

var printAll = function(arr,f,c){
  map(function(x){printOne(x,f,c)},arr);
  return
}

var worlds = [
	{locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: true, moveSamNoho: false, moveThelmaNoho: false},
	{locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: true, moveThelmaNoho: false},
	{locSam: 'Noho', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Noho', locLucy: 'Amherst', moveLucyNoho: true, moveSamNoho: false, moveThelmaNoho: false},
	{locSam: 'Noho', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Amherst', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
	{locSam: 'Amherst', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: true, moveThelmaNoho: false},
  {locSam: 'Else', locLucy: 'Else', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: false},
	]

var real_worlds = [
  {locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: true, moveSamNoho: false, moveThelmaNoho: false},
  {locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
  {locSam: 'Amherst', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: true, moveThelmaNoho: false},
  {locSam: 'Noho', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
  {locSam: 'Noho', locLucy: 'Amherst', moveLucyNoho: true, moveSamNoho: false, moveThelmaNoho: false},
  {locSam: 'Noho', locLucy: 'Amherst', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
  {locSam: 'Amherst', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: false, moveThelmaNoho: true},
  {locSam: 'Amherst', locLucy: 'Noho', moveLucyNoho: false, moveSamNoho: true, moveThelmaNoho: false},
  ]

var worldPrior = function() {
	return uniformDraw(worlds)
}

var realworldPrior = function() {
  return uniformDraw(real_worlds)
}


var perspectives = [
{holder: speaker},
{holder: addressee}]

var perspectiveSelect = {
	'You are coming to Northampton' : function(){ return uniformDraw(perspectives)},
	'You are going to Northampton' : function(){ return uniformDraw(perspectives)},
	'I am coming to Northampton' : function(){ return uniformDraw(perspectives)},
	'I am going to Northampton' : function(){ return uniformDraw(perspectives)},
	'Thelma is coming to Northampton' : function(){ return uniformDraw(perspectives)},
	'Thelma is going to Northampton' : function(){ return uniformDraw(perspectives)},
  'I am walking to Northampton' : function(){ return uniformDraw(perspectives)},
  'Thelma is walking to Northampton' : function(){ return uniformDraw(perspectives)},
  'You are walking to Northampton' : function(){ return uniformDraw(perspectives)},
  'NULL' : function(){ return uniformDraw(perspectives)},
};

var pPrior = function() {
  return uniformDraw(perspectives)
};

var perspectiveCost = function(perspective) {
	if(perspective.holder === speaker) {
	return 0 }
	else {
	return cost_setting
	}
}

var utteranceCost = function(utterance) {
	return 0
}

var utterances = [
'You are coming to Northampton',
'I am coming to Northampton',
'Thelma is going to Northampton',
'Thelma is coming to Northampton',
'I am going to Northampton',
'You are going to Northampton',
'You are walking to Northampton',
'I am walking to Northampton',
'Thelma is walking to Northampton',
'NULL']

var uttPrior = function() {
	return uniformDraw(utterances)
};

var gop_meaning = function(utterance, world, perspective){
  if ((utterance == 'Thelma is coming to Northampton' && (world.moveThelmaNoho && (((perspective.holder === speaker) && (world.locSam === 'Noho'))||((perspective.holder === addressee) && (world.locLucy === 'Noho'))))) ||
  (utterance == 'You are coming to Northampton' && (world.moveLucyNoho && (perspective.holder === speaker) && (world.locSam === 'Noho'))) ||
  (utterance == 'I am coming to Northampton' && (world.moveSamNoho && (perspective.holder === addressee) && (world.locLucy === 'Noho'))) ||
  (utterance == 'Thelma is going to Northampton' && (world.moveThelmaNoho && ((perspective.holder === speaker) && (world.locSam === 'Amherst')||(perspective.holder === addressee && world.locLucy === 'Amherst'))))||
  (utterance == 'You are going to Northampton' && (world.moveLucyNoho && ((perspective.holder === speaker) && (world.locSam === 'Amherst')||(perspective.holder === addressee && world.locLucy === 'Amherst'))))||
  (utterance == 'I am going to Northampton' && (world.moveSamNoho && ((perspective.holder === speaker) && (world.locSam === 'Amherst')||(perspective.holder === addressee && world.locLucy === 'Amherst')))) ||
  (utterance == 'I am walking to Northampton' && world.moveSamNoho) ||
  (utterance == 'You are walking to Northampton' && world.moveLucyNoho) ||
  (utterance == 'Thelma is walking to Northampton' && world.moveThelmaNoho) ||
  (utterance == 'NULL') || (world.locLucy == 'Else')
  ){
  	return 1
  } else {
  	return 0
  }
}

var nogop_meaning = function(utterance, world, perspective){
  if ((utterance == 'Thelma is coming to Northampton' && (world.moveThelmaNoho && (((perspective.holder === speaker) && (world.locSam === 'Noho'))||((perspective.holder === addressee) && (world.locLucy === 'Noho'))))) ||
   (utterance == 'You are coming to Northampton' && (world.moveLucyNoho && (perspective.holder === speaker) && (world.locSam === 'Noho'))) ||
  (utterance == 'I am coming to Northampton' && (world.moveSamNoho && (perspective.holder === addressee) && (world.locLucy === 'Noho'))) ||
  (utterance == 'Thelma is going to Northampton' && world.moveThelmaNoho) ||
  (utterance == 'You are going to Northampton' && world.moveLucyNoho) ||
  (utterance == 'I am going to Northampton' && world.moveSamNoho) ||
  (utterance == 'Thelma is walking to Northampton' && world.moveThelmaNoho) ||
  (utterance == 'You are walking to Northampton' && world.moveLucyNoho) ||
  (utterance == 'I am walking to Northampton' && world.moveSamNoho) ||
  (utterance == 'NULL') || (world.locLucy == 'Else')
  ){
  	return 1
  } else {
  	return 0
  }
}

var lookup_semantics = function(u,w,p){
  if(process.argv[4]=="gop"){
    return gop_meaning(u,w,p)
  } else{
    return nogop_meaning(u,w,p)
  }
}

var marg_perspective = function(utt){
  var probs = map(function(p){
    map(function(w){lookup_semantics(utt,w,p)},real_worlds)},perspectives)
  var sums = map(function(arr){Math.sum(arr)},probs)
  return Math.sum(sums)
}

var literalListener = function(utterance,perspective){
   return Infer({model: function(){
    //console.log("In literal listener")
   condition(perspective)
   var world = worldPrior()
   var meaning = lookup_semantics(utterance,world,perspective)
   condition(meaning)
   return world
   }})
};

var literalSpeaker = function(world) {
  return Infer({model: function(){
    //console.log("In literal speaker")
    var utt = uttPrior()
    //var pPrior = perspectiveSelect[utt] //p(a|m)p(m)
    var p = pPrior()
    var margP = marg_perspective(utt)
    factor(((literalListener(utt,p).score(world)*margP)-perspectiveCost(p)))
    return {utterance: utt,perspective: p}
  }})
}

var pragmaticListener = function(u) {
  return Infer({model: function(){
    //console.log("In prag listener")
    //var pPrior = perspectiveSelect[u]
    var p = pPrior()
    var w = realworldPrior()
    factor(literalSpeaker(w).score({utterance:u,perspective: p}))
    return {world: w,perspective: p}
  }})
}

var pragmaticSpeaker = function(w) {
  return Infer({model: function(){
    var utt = uttPrior()
    //var pPrior = perspectiveSelect[utt]
    var p = pPrior()
    factor((pragmaticListener(utt).score({world: w,perspective: p})-perspectiveCost(p)))
    return {utterance: utt,perspective: p}
  }})
}

//display(stringify(literalSpeaker(worlds[6])));

//console.log(utterances[0]);
//display(stringify(pragmaticListener(utterances[0])));

printAll(utterances,pragmaticListener,cost_setting);