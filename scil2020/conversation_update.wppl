// PRINT UTILITIES

//prints json objects
var stringify = function(x){return JSON.stringify(x)}

var printU = function(u){
  console.log("Utterance: "+stringify(u));
}

var printW = function(w){
  console.log("World: "+stringify(w));
}

//prints cost, utterance, evidence pairs
var printOne = function(x,f,c){
  console.log("Cost: "+c)
  console.log("Utterance: "+stringify(x));
  console.log("Evidence: "+stringify(f(x)));
  return
}

// iterates through array and prints all members
var printAll = function(arr,f,c){
  map(function(x){printOne(x,f,c)},arr);
  return
}

//prints information about a generation in a csv-friendly format
var printGeneration = function(genObj){
  var worlds = genObj['speaker_beliefs']['params']['vs'];
  var speaker = normalizeProbs(genObj['speaker_beliefs']['params']['ps']);
  var listener = normalizeProbs(genObj['listener_beliefs']['params']['ps']);
  var prefix = genObj['speaker']+','+genObj['cg_type']+','+genObj['curr_gen']+','+genObj['sampler']['name']+','+genObj['sampled_w']['Index']+','+genObj['selected_u'];
  var belief_pairs = map2(function(x,y){return {speaker: x, listener: y}},speaker,listener);
  if (genObj['cg_type'] == 'shared'){
    var cg = normalizeProbs(genObj['cg']['params']['ps']);
    var cg_worlds = map2(function(x,y){var cgWorld = {cgProb: y}; return Object.assign(cgWorld,x)},worlds,cg);
    var world_pairs = map2(function(x,y){return Object.assign(x,y)},cg_worlds,belief_pairs);
    var print_pairs = map(function(x){console.log(reduce(function(x,y){y+x},prefix,map(function(y){','+y},Object.values(x))))},world_pairs);
  } else {
    var cg_speaker = normalizeProbs(genObj['cg_speaker']['params']['ps']);
    var cg_listener = normalizeProbs(genObj['cg_listener']['params']['ps']);
    var cg_pairs = map2(function(x,y){return {cg_speaker_prob: x, cg_listener_prob: y}},cg_speaker,cg_listener);
    var cg_worlds = map2(function(x,y){return Object.assign(y,x)},worlds,cg_pairs);
    var world_pairs = map2(function(x,y){return Object.assign(x,y)},cg_worlds,belief_pairs);
    var print_pairs = map(function(x){console.log(reduce(function(x,y){y+x},prefix,map(function(y){','+y},Object.values(x))))},world_pairs);
  }
  return
}

// PROB UTILITIES

// argmax

var argmax  = function(arr){
  var init = { currentIndex: arr.length-1, maxIndex: 0, maxValue: arr[0] };
  var a = reduce(function(elt, acc) {
    if (elt > acc.maxValue) {
      return { currentIndex: acc.currentIndex - 1, maxIndex: acc.currentIndex, maxValue: elt };
    }
    else {
       return { currentIndex: acc.currentIndex - 1, maxIndex: acc.maxIndex, maxValue: acc.maxValue };
    }
  }, init, arr);
return a.maxIndex;
};

// returns the index of the probability in array 1 with the greatest positive difference from array 2 (it is higher in arr 1 than arr 2)
var getHighestDiffProb = function(a1,a2){
  var probDiffs = map2(function(p1,p2){p1-p2},a1,a2);
  var maxDiffIdx = argmax(probDiffs);
  return maxDiffIdx;
}

// returns the index of the probability in Dist. 1 with the greatest positive difference from Dist. 2 (it is higher in Dist. 1 than Dist. 2)
var getHighestDiffDist = function(d1,d2){
  var a1 = normalizeDistProbs(d1);
  var a2 = normalizeDistProbs(d2);
  var probDiffs = map2(function(p1,p2){p1-p2},a1,a2);
  var maxDiffIdx = argmax(probDiffs);
  return maxDiffIdx;
}


// returns a normalized probability distribution from a webppl distribution object
var normalizeDistProbs = function(dist){
  var prob_weights = dist['params']['ps']
  var prob_sum = sum(prob_weights)
  var probs = map(function(x){x/prob_sum},prob_weights);
  return probs
}

// returns a normalized probability distribution from an array of probability weights
var normalizeProbs = function(weights){
  var prob_sum = sum(weights)
  var probs = map(function(x){x/prob_sum},weights);
  return probs
}

// returns the entropy of a distribution
var findEntropy = function(dist){
  var probs = normalizeDistProbs(dist);
  console.log(probs);
  var log_probs = map(function(x){Math.log2(x)},probs);
  console.log(log_probs);
  var prob_products = map2(function(x,y){x*y},probs,log_probs);
  console.log(prob_products);
  var prob_sum = sum(prob_products);
  return -prob_sum
}

// returns the most likely utterance from distribution d
var maxU = function(d){
  var uts = d['params']['dist']
  var keys = Object.keys(uts)
  var us = map(function(k){uts[k]['val']['utterance']},keys)
  var probs = map(function(k){uts[k]['prob']},keys)
  var pairs = map2(function(x,y){return {'utterance' : x, 'prob':y}},us,probs)
  var pMax = reduce(function(x,y){return x['prob']>y['prob']?x:y}, {'utterance' : '', 'prob': 0},pairs)
  return pMax
}

// retrieves the posterior distribution
var getPosteriors = function(interpretation,worlds){
  var int = interpretation['params']['dist']
  var keys = Object.keys(int)
  var probs = map(function(k){int[k]['prob']},keys)
  var ws= map(function(k){int[k]['val']},keys)
  var posts = map(function(x){var idx = ws.indexOf(x); if(idx!= -1){return probs[idx]}else{return 0}},worlds)
  return posts
}

// calculates an posterior distribution over worlds where the prior is updated according to a learning rate
var wUpdate = function(worldPriors,worldPosteriors,lr){
  var updates = map2(function(post,prior){prior+(post*lr)},worldPosteriors,worldPriors)
  var u_sum = sum(updates)
  var updatedWorlds = map(function(u){u/u_sum},updates)
  return updatedWorlds
}

// returns a posterior distribution where world w has all of the probability weight
var getWPosteriorsS = function(w,worlds){
  var posts = map(function(x){if(x==w){1}else{0}},worlds)
  return posts
}

// SAMPLERS

var samplers = {threshold: {name: 'threshold', threshold: 0.3},
weighted: {name: 'weighted'},
difference: {name: 'difference'}};

// DISTRIBUTIONS

// world set
var worlds = [
  {"Index": 0, "Major": "German", "School": "University of New Orleans", "Name": "Nancy", "Location Preference": "outdoor"},
  {"Index": 1,"Major": "Astronomy", "School": "Franklin Pierce Law Center", "Name": "Nathan", "Location Preference": "outdoor"}, 
  {"Index": 2,"Major": "German", "School": "State University of New York at Buffalo", "Name": "Daniel", "Location Preference": "outdoor"}, 
  {"Index": 3,"Major": "Hispanic-American Studies", "School": "Franklin Pierce Law Center", "Name": "Gerald", "Location Preference": "outdoor"}, 
  /*{"Index": 4, "Major": "Ceramic Engineering", "Company": "Commercial Metals Company","Name": "Nathan", "Location Preference": "outdoor"}, 
  {"Index": 5, "Major": "Adult & Continuing Education", "School": "Canisius College", "Name": "Gary", "Location Preference": "indoor"}, 
  {"Index": 6, "Major": "Veterinary Sciences", "School": "Marymount University", "Name": "Gary", "Location Preference": "outdoor"}, 
  {"Index": 7, "Major": "Electrical Engineering", "School": "University of Dallas", "Name": "Gary", "Location Preference": "outdoor"}, 
  {"Index": 8, "Major": "Astronomy", "School": "Saint Mary's College of California", "Name": "Nathan", "Location Preference": "outdoor"},
  {"Index": 9, "Major": "Social Work & Social Services", "Company": "Commercial Metals Company","Name": "Mary","Location Preference": "outdoor"}*/
  ]

// world priors
var initWorldPriors = [1,1,1,1,1,1,1,1,1,1];

// returns world distribution
var getWorldDist = function(worlds,worldPs) {
	return Categorical({ps: worldPs,vs: worlds})
}

// utterance set
var utterances = [
'They are a student',
//'They work',
'They are female',
'They are male',
'Their name starts with N',
//'Their name is Nancy',
//'Their name is Nathan',
//'Their name is Daniel',
//'Their name is Gary',
//'Their name is Gerald',
//'Their name is Mary',
//'They study German',
//'They study Astronomy',
//'They study Veterinary Sciences',
//'They study Engineering',
//'They study a social science',
'They study a humanity',
'They study a science',
'They like being outdoors',
//'They like being indoors',
'NULL'
]

//utterance priors are even

//returns utterance distribution
var uttPrior = function() {
	return uniformDraw(utterances)
};

// utterance cost function
var utteranceCost = function(utterance) {
  return 0
}

// interpretation function
var get_meaning = function(utterance, world){
  if ((utterance == 'They are a student' && world["Company"] == undefined) ||
   (utterance == 'They work' && world["Company"] != undefined) ||
   (utterance == 'They are female' && (world["Name"] == 'Nancy' || world["Name"] == 'Mary')) ||
   (utterance == 'They are male' && (world["Name"] != 'Nancy' && world["Name"] != 'Mary')) ||
   (utterance == 'Their name is Nathan' && world["Name"] == 'Nathan') ||
   (utterance == 'They study German' && world["Major"] == 'German') ||
   (utterance == 'They study a science' && (world["Major"] == 'Ceramic Engineering' || world["Major"] == 'Astronomy' || world["Major"] == 'Electrical Engineering' || world["Major"] == "Veterinary Sciences")) ||
   (utterance == 'They study a humanity' && (world["Major"] == "German" || world["Major"] == "Hispanic-American Studies")) ||
   (utterance == 'They study a social science' && (world["Major"] == "Adult & Continuing Education" || world["Major"] == "Social Work & Social Services")) ||
   (utterance == 'Their name starts with N' && (world["Name"] == 'Nathan' || world["Name"] == 'Nancy')) ||
   (utterance == 'They like being outdoors' && world["Location Preference"] == "outdoor") ||
   (utterance == 'They like being indoors' && world["Location Preference"] == "indoor") ||
   (utterance == 'NULL')
   ){
  	return 1
} else {
  return 0
}
}

// RSA MODEL LEVELS

// literal listener: p(w|u) \propto p(u|w)p(w) where p(u|w) is truth value of u in w
var literalListener = function(utterance,worldDist){
   return Infer({model: function(){
   var w = sample(worldDist)
   var meaning = get_meaning(utterance,w)
   condition(meaning)
   return w
   }})
};

// pragmatic speaker: p(u|w) \propto p(w|u)p(u) where p(u) is uniform and p(w|u) is given by literalListener
var pragmaticSpeaker = function(world,worldDist) {
  return Infer({model: function(){
    var utt = uttPrior()
    factor(literalListener(utt,worldDist).score(world))
    return {utterance: utt}
  }})
}

// pragmatic listener: p(w|u) \propto p(u|w)p(w) where p(u|w) is given by pragmaticSpeaker
var pragmaticListener = function(u,worldDist_s,worldDist_l) {
  return Infer({model: function(){
    var w = sample(worldDist_l)
    factor(pragmaticSpeaker(w,worldDist_s).score({utterance:u}))
    return w
  }})
}

// CONTEXT UPDATE 

//initialize distributions
// currently assumes CG is shared and starts out with uniform priors

var init_distributions = function(a_priors,b_priors,world_set,shared){
  var a_beliefs = getWorldDist(world_set,a_priors);
  var b_beliefs = getWorldDist(world_set,b_priors);
  if (shared == 'shared'){
    var cg = getWorldDist(world_set,map(function(x){1},world_set));
    var all_priors = {a_beliefs: a_beliefs, b_beliefs: b_beliefs, cg: cg };
    return all_priors;
  } else{
    var cg_a = getWorldDist(world_set,map(function(x){1},world_set));
    var cg_b = getWorldDist(world_set,map(function(x){1},world_set));
    var all_priors = {a_beliefs: a_beliefs, b_beliefs: b_beliefs, cg_a: cg_a, cg_b: cg_b };
    return all_priors;
  };
}

// simulate a speaker observation by sampling a world
// currently assumes worlds are sampled in proportion to their probability in speaker belief dist.

var sample_world = function(speaker_priors,cg,worlds,sampler){
  if (sampler['name'] == 'weighted') { //sample a world according to its probability in speaker belief dist.
    return sample(speaker_priors);
  }
  if (sampler['name'] == 'difference'){ //sample a world based on the greatest potential probability gain
    var biggest_diff = getHighestDiffDist(speaker_priors,cg);
    return worlds[biggest_diff];
  }
  if (sampler['name'] == 'threshold'){ //sample a world according to its probability, omitting low probability worlds
    var threshold = sampler.threshold;
    var speaker_worlds = speaker_priors['params']['vs'];
    var speaker_probs = normalizeProbs(speaker_priors['params']['ps']);
    var prob_pairs = map2(function(x,y){return {w: x, prob: y}},speaker_worlds,speaker_probs);
    var above_threshold = filter(function(x){x['prob'] > threshold},prob_pairs);
    var thresh_worlds = map(function(x){return x['w']},above_threshold);
    var thresh_probs = map(function(x){return x['prob']},above_threshold);
    return sample(getWorldDist(thresh_worlds,thresh_probs));
  }
}

//speaker calculates which utterance to select

var pick_utterance = function(w,cg){
  var u = maxU(pragmaticSpeaker(w,cg))["utterance"];
  return u
}

// listener interprets utterance (also: speaker models listener interpreting utterance)

var interpret_utterance = function(u,cg){
  var posteriors = getPosteriors(pragmaticListener(u,cg,cg),cg['params']['vs']);
  return posteriors;
}

var interpret_utterance_listener = function(u,cg_s,cg_l){
  var posteriors = getPosteriors(pragmaticListener(u,cg_s,cg_l),cg_s['params']['vs']);
  return posteriors;
}

// update CG with interpretation of utterance
// currently assumes a shared CG and a fixed learning rate

var update_cg = function(cg,posteriors,lr){
  var cg_priors = cg['params']['ps'];
  var cg_worlds = cg['params']['vs'];
  var updated_weights = map2(function(post,prior){prior+(post*lr)},posteriors,cg_priors);
  var cg_posts = normalizeProbs(updated_weights);
  return getWorldDist(cg_worlds,cg_posts)
}

//Simulate a conversation where participants have direct access to a shared Common Ground

var runSharedFixedConversation = function(n_gens,cg,speaker_beliefs,listener_beliefs,sampler,lr_set){
  var genObj = {speaker: "n/a", cg_type: 'shared', curr_gen: 0, speaker_beliefs: speaker_beliefs, sampled_w: {Index: -1}, listener_beliefs: listener_beliefs, cg: cg, sampler: sampler, lr: lr_set['lr']};
  printGeneration(genObj);
  return runSharedFixedConversationHelper("a",1,n_gens,cg,speaker_beliefs,listener_beliefs,sampler, lr_set);
}

var runSharedFixedConversationHelper = function(speaker,curr_gen,n_gens,cg,speaker_beliefs,listener_beliefs,sampler,lr_set){
  var lr = lr_set['lr'];
  if (curr_gen == n_gens+1){
    var genObj = {speaker: speaker, cg_type: 'shared', curr_gen: curr_gen, speaker_beliefs: speaker_beliefs, listener_beliefs: listener_beliefs, 
      cg: cg, sampler: sampler, lr: lr};
    return genObj;
  } else {
    var world_set = cg['params']['vs'];
    var sampled_w = sample_world(speaker_beliefs,cg,world_set,sampler);
    var selected_u = pick_utterance(sampled_w,cg)
    var int_posteriors = interpret_utterance(selected_u,cg);
    var new_cg = update_cg(cg,int_posteriors,lr);
    var genObj = {speaker: speaker, cg_type: 'shared', curr_gen: curr_gen, speaker_beliefs: speaker_beliefs, listener_beliefs: listener_beliefs, 
      sampled_w: sampled_w, selected_u: selected_u, cg: new_cg, sampler: sampler, lr: lr};
    printGeneration(genObj);
    var next_speaker = (speaker == "a")? "b" : "a";
    runSharedFixedConversationHelper(next_speaker,curr_gen+1,n_gens,new_cg,listener_beliefs,speaker_beliefs,sampler,lr_set);
  }
}

var runApproxFixedConversation = function(n_gens,cg_a,cg_b,a_beliefs,b_beliefs,sampler,lr_set){
  var genObj = {speaker: "n/a", cg_type: 'approx', curr_gen: 0, speaker_beliefs: a_beliefs, sampled_w: {Index: -1}, listener_beliefs: b_beliefs, cg_speaker: cg_a, cg_listener: cg_b, sampler: sampler, lr: lr_set['lr']};
  printGeneration(genObj);
  /*console.log("In parent run conversation function");
  console.log("cg_a");
  console.log(cg_a);
  console.log("cg_b");
  console.log(cg_b);
  console.log("speaker beliefs");
  console.log(a_beliefs);
  console.log("listener beliefs");
  console.log(b_beliefs);*/
  return runApproxFixedConversationHelper("a",1,n_gens,cg_a,cg_b,a_beliefs,b_beliefs,sampler,lr_set);
}

var runApproxFixedConversationHelper = function(speaker,curr_gen,n_gens,cg_speaker,cg_listener,speaker_beliefs,listener_beliefs,sampler,lr_set){
  var lr = lr_set['lr'];
  /*console.log("In child run conversation function");
  console.log("Generation: "+curr_gen);
  console.log("Current speaker: "+speaker);
  console.log("cg_speaker");
  console.log(cg_speaker);
  console.log("cg_listener");
  console.log(cg_listener);
  console.log("speaker beliefs");
  console.log(speaker_beliefs);
  console.log("listener beliefs");
  console.log(listener_beliefs);*/
  if (curr_gen == n_gens+1){
    var genObj = {speaker: speaker, cg_type: 'approx', curr_gen: curr_gen, speaker_beliefs: speaker_beliefs, listener_beliefs: listener_beliefs, 
      cg_speaker: cg_speaker, cg_listener: cg_listener, sampler: sampler, lr: lr};
    return genObj;
  } else {
    var world_set = speaker_beliefs['params']['vs'];
    var sampled_w = sample_world(speaker_beliefs,cg_speaker,world_set,sampler);
    var selected_u = pick_utterance(sampled_w,cg_speaker);
    var int_posteriors_speaker = interpret_utterance(selected_u,cg_speaker); //speaker assumes listener uses CG to interpret
    var int_posteriors_listener = interpret_utterance_listener(selected_u,cg_listener,listener_beliefs); //listener uses their own beliefs as priors, but assumes speaker uses CG to sample
    var new_cg_speaker = update_cg(cg_speaker,int_posteriors_speaker,lr);
    var new_cg_listener = update_cg(cg_listener,int_posteriors_listener,lr);
    var genObj = {speaker: speaker, cg_type: 'approx', curr_gen: curr_gen, speaker_beliefs: speaker_beliefs, listener_beliefs: listener_beliefs, 
      sampled_w: sampled_w, selected_u: selected_u, cg_speaker: new_cg_speaker, cg_listener: new_cg_listener, sampler: sampler, lr: lr};
    printGeneration(genObj);
    var next_speaker = (speaker == "a")? "b" : "a";
    runApproxFixedConversationHelper(next_speaker,curr_gen+1,n_gens,new_cg_listener,new_cg_speaker,listener_beliefs,speaker_beliefs,sampler,lr_set);
  }
}


// RUN CALL

var main = function(){
  // command-line options
  var world_sampler = samplers[process.argv[3]];
  var cg_shared = process.argv[4];
  var n_moves = Math.floor(process.argv[5]);
  //var world_file = fs.readFile(process.argv[6]);

  //log format of output
  var initial_dists = init_distributions([10,1,1,1],[1,1,1,10],worlds,cg_shared);
  var a_beliefs = initial_dists['a_beliefs'];
  var b_beliefs = initial_dists['b_beliefs'];
  var lr_set = {lr: 0.05};
  if (cg_shared == 'shared'){
    var cg = initial_dists['cg'];
    console.log('speaker,cg,generation,sampler,sampled_w_idx,selected_u,speaker_belief,listener_belief,location_pref,name,school/company,major,w_idx,cg_prob');
    runSharedFixedConversation(n_moves,cg,a_beliefs,b_beliefs,world_sampler,lr_set);
  } else{
    var cg_a = initial_dists['cg_a'];
    var cg_b = initial_dists['cg_b'];
    /*console.log("cg_a");
    console.log(cg_a);
    console.log("cg_b");
    console.log(cg_b);
    console.log("a beliefs");
    console.log(a_beliefs);
    console.log("b beliefs");
    console.log(b_beliefs);*/
    console.log('speaker,cg,generation,sampler,sampled_w_idx,selected_u,speaker_belief,listener_belief,location_pref,name,school/company,major,w_idx,cg_speaker_prob,cg_listener_prob');
    runApproxFixedConversation(n_moves,cg_a,cg_b,a_beliefs,b_beliefs,world_sampler,lr_set);
  }
  return
};

// COMMAND LINE ARGS


if(process.argv[5]==undefined){
  console.log('Usage: webppl conversation_update.wppl sampler cg_shared? n_moves');
} else{
  main();
};